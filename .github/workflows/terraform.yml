name: 'Terraform - plan'

on:
  push:
    branches:
    - master
    paths: 
    - terraform/**
  pull_request:
    branches:
    - master
    paths: 
    - terraform/**

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }} 
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }} 


permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs: 
  terraform:
    runs-on: ubuntu-latest
    name: Terraform
    steps:
    - uses: actions/checkout@v2.0.0
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.3
        terraform_wrapper: false
  
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }} 
        tenant-id: ${{ secrets.AZURE_TENANT_ID }} 
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
        enable-AzPSSession: true 

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: terraform
      shell: bash
    
    - run : echo "arm is $ARM_CLIENT_SECRET"
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -refresh=false  -no-color -out out.plan
      working-directory: terraform
      shell: bash
    
    - name: Terraform Show
      id: show
      run: terraform show -no-color out.plan 2>&1 > /tmp/plan.txt
      working-directory: terraform
      shell: bash

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const fs = require("fs");
          const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
          const maxGitHubBodyCharacters = 65536;
          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }
          // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
          var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
          for (let i = 0; i < plans.length; i++) {
            const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
            #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${plans[i]}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;   
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
